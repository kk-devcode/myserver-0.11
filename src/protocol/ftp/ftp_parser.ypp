%{
#include <include/protocol/ftp/ftp.h>
#include <include/protocol/ftp/ftp_parser.h>
#include <include/protocol/ftp/ftp_lexer.h>
#include <include/server/clients_thread.h>
#include <assert.h>
%}

%pure-parser
%defines
%lex-param { yyscan_t yyscanner }
%parse-param { Ftp *pContext }
%locations

%union
{
  int		m_nInt;
  char		m_nChar;
  char		m_szStr[PARSER_STR_LEN];
  FtpHost 	m_host;
}

%{
#define YYSTACK_ALLOC gnulib::malloc
#define yyscanner pContext->getScanner()
%}

/* general tokens */
%token <m_nInt> NUMBER_FTP_ARG
%token <m_szStr> STRING_FTP_ARG
%token <m_nChar> CHAR_FTP_ARG
%type <m_host> host_port
%type <m_host> host_number
%type <m_host> port_number
%token CRLF_FTP_SEP
%token SPACE_FTP_SEP
%token PUNCT_FTP_SEP
%type <m_nInt> mode_code
%type <m_nInt> type_code
%type <m_nInt> structure_code
%type <m_nInt> format_control_code

/* Login */
%token USER_FTP_COMMAND
%token PASS_FTP_COMMAND

/* Logout */
%token QUIT_FTP_COMMAND

/* Transfer parameters */
%token PORT_FTP_COMMAND
%token PASV_FTP_COMMAND
%token MODE_FTP_COMMAND
%token TYPE_FTP_COMMAND
%token STRU_FTP_COMMAND

/* File action commands */
%token REST_FTP_COMMAND
%token RETR_FTP_COMMAND
%token LIST_FTP_COMMAND
%token NLST_FTP_COMMAND
%token ABOR_FTP_COMMAND
%token CWD_FTP_COMMAND
%token CDUP_FTP_COMMAND
%token PWD_FTP_COMMAND
%token ALLO_FTP_COMMAND

%token STOR_FTP_COMMAND
%token STOU_FTP_COMMAND
%token DELE_FTP_COMMAND
%token APPE_FTP_COMMAND
%token MKD_FTP_COMMAND
%token RMD_FTP_COMMAND
%token RNFR_FTP_COMMAND
%token RNTO_FTP_COMMAND

/* Informational commands */
%token HELP_FTP_COMMAND
%token SYST_FTP_COMMAND
%token STAT_FTP_COMMAND

/* Miscellaneous commands*/
%token NOOP_FTP_COMMAND

/* SITE commands */
%token SITE_FTP_COMMAND
%token CHMOD_FTP_COMMAND
%token UTIME_FTP_COMMAND

/* RFC 3659 cmds*/
%token SIZE_FTP_COMMAND

%%
cmd_list	:/* empty */
		| cmd_list cmd
		{
			pContext->computeParseLength(@$);
		}
		;
	/* Minimal FTP implementation */
cmd		: USER_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->user($3);
		}
		| PASS_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->password($3);
		}
		| PORT_FTP_COMMAND SPACE_FTP_SEP host_port CRLF_FTP_SEP
		{
		  pContext->port($3);
		}
		| PASV_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->pasv();
		}
		| MODE_FTP_COMMAND SPACE_FTP_SEP mode_code CRLF_FTP_SEP
		{
		  pContext->mode($3);
		}
		| TYPE_FTP_COMMAND SPACE_FTP_SEP type_code CRLF_FTP_SEP
		{
      if ($3 == -1)
        pContext->ftpReply(504);
      else
        pContext->type($3);
		}
		| TYPE_FTP_COMMAND SPACE_FTP_SEP type_code SPACE_FTP_SEP format_control_code CRLF_FTP_SEP
		{
      if ($3 == -1 || $5 == -1)
        pContext->ftpReply(504);
      else
        pContext->type($3, $5);
		}
		| STRU_FTP_COMMAND SPACE_FTP_SEP structure_code CRLF_FTP_SEP
		{
		  pContext->stru($3);
		}
		| REST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->rest($3);
		}
		| ALLO_FTP_COMMAND SPACE_FTP_SEP NUMBER_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->allo($3);
		}
		| ALLO_FTP_COMMAND SPACE_FTP_SEP NUMBER_FTP_ARG SPACE_FTP_SEP 'r' SPACE_FTP_SEP NUMBER_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->allo($3, $7);
		}
		| RETR_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->retr($3);
		}
		| ABOR_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->abor();
		}
		| LIST_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->list();
		}
		| LIST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->list($3);
		}
		| NLST_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->nlst();
		}
		| NLST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->nlst($3);
		}
		| CWD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->cwd($3);
		}
		| CDUP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->cwd("..");
		}
		| PWD_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->pwd();
		}
		| HELP_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->help($3);
		}
		| HELP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->help();
		}
		| SYST_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->syst();
		}
		| STAT_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->statCmd();
		}
		| QUIT_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->quit();
		}
		| NOOP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->noop();
		}
		| STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->ftpReply(502);//any new commands
		}
		| STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->ftpReply(502);//any new commands
		}
		| CRLF_FTP_SEP
		{
			// ignore empty lines
		}
		| STOR_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->stor($3);
		}
		| STOU_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->stou($3);
		}
		| DELE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->dele($3);
		}
		| APPE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->appe($3);
		}
		| MKD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->mkd($3);
		}
		| RMD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->rmd($3);
		}
		| RNFR_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->rnfr($3);
		}
		| RNTO_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Rnto($3);
		}
		| SITE_FTP_COMMAND SPACE_FTP_SEP cmd
		{
		}
		| CHMOD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			//pContext->Chmod($3, $5);
			pContext->ftpReply(502);
		}
		| UTIME_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			//pContext->Utime($3, $5);
			pContext->ftpReply(502);
		}
		/* RFC 3659 commands*/
		| SIZE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->size($3);
		}
		;

	/* ftp command arguments */
host_port	: host_number ',' port_number
		{
		  $$.h1 = $1.h1;
		  $$.h2 = $1.h2;
		  $$.h3 = $1.h3;
		  $$.h4 = $1.h4;
		  $$.p1 = $3.p1;
		  $$.p2 = $3.p2;
		}
		;

host_number	: NUMBER_FTP_ARG ',' NUMBER_FTP_ARG ',' NUMBER_FTP_ARG ',' NUMBER_FTP_ARG
		{
		  $$.h1 = $1;
		  $$.h2 = $3;
		  $$.h3 = $5;
		  $$.h4 = $7;
		}
		;

port_number	: NUMBER_FTP_ARG ',' NUMBER_FTP_ARG
		{
		  $$.p1 = $1;
		  $$.p2 = $3;
		}
		;

mode_code	: 's'
		{
		  $$ = FtpuserData::MODE_STREAM;
		}
		| 'b'
		{
		  $$ = -1;
		}
		| 'c'
		{
		  $$ = -1;
		}
		;

structure_code	: 'f'
		{
			$$ = FtpuserData::STRU_FILE;
		}
		| 'r'
		{
		  $$ = -1;
		}
		| 'p'
		{
		  $$ = -1;
		}
		;

type_code	: 'a'
		{
		  $$ = FtpuserData::REPR_ASCII;
		}
		| 'i'
		{
		  $$ = FtpuserData::REPR_IMAGE;
		}
		| 'e'
		{
      $$ = -1;
		}
		| 'l'
		{
      $$ = -1;
		}
		;

format_control_code : 'n'
		{
		  $$ = FtpuserData::NON_PRINT;
		}
		| 't'
		{
		  $$ = -1;
		}
		| 'c'
		{
      $$ = -1;
		}
		;
%%

int Ftp::parseControlConnection()
{
  if (td.buffer == NULL || td.buffer->getBuffer() == NULL)
    return ClientsThread::DELETE_CONNECTION;

  FtpuserData *pFtpuserData = static_cast<FtpuserData *> (td.pConnection->protocolBuffer);
  if (pFtpuserData == NULL)
    return ClientsThread::DELETE_CONNECTION;

  /* awaiting commands reply.  */
  if (pFtpuserData->m_nFtpstate <= FtpuserData::NO_CONTROL_CONNECTION)
    {
      ftpReply (220);
      pFtpuserData->m_nFtpstate = FtpuserData::CONTROL_CONNECTION_UP;
    }

  MemBuf out;
  escapeTelnet (*td.buffer, out);
  if (! m_bEnablePipelining)
    {
      MemBuf tmpBuff (out);
      removePipelinedCmds (tmpBuff, out);
    }
  char *pBuffToParse = out.getBuffer ();

  if (pBuffToParse == NULL || td.buffersize <= td.m_nParseLength )
    return ClientsThread::KEEP_CONNECTION;
  else
    pBuffToParse += td.m_nParseLength;

  yylex_init (&m_scanner);
  yy_buffer_state *bufstate = yy_scan_string (pBuffToParse, m_scanner);
  int nParserRet = yyparse (this);
  yy_delete_buffer (bufstate, m_scanner);
  yylex_destroy (m_scanner);

  switch (nParserRet)
    {
    case 0:
      if (pFtpuserData->m_nFtpstate == FtpuserData::NO_CONTROL_CONNECTION )
        return ClientsThread::DELETE_CONNECTION;
      else
        return ClientsThread::KEEP_CONNECTION;

    case 1:
      /* Invalid input.  */
      return ClientsThread::DELETE_CONNECTION;

    case 2:
      /* memory exhaustion!  */
      return ClientsThread::DELETE_CONNECTION;
    }
  /*TODO: handle INCOMPLETE_REQUEST */
  return ClientsThread::DELETE_CONNECTION;
}

u_long Ftp::computeParseLength (const YYLTYPE &location)
{
  if (td.buffer == NULL)
    return 1;

  int nBuffLine = 1, nBuffCol = 0;
  char *pszBuff = td.buffer->getBuffer ();
  for (u_long i = 0; i < td.buffersize; i++)
    {
      if (pszBuff[i] == '\n')
        {
          nBuffLine++;
          nBuffCol = 0;
        }
      else
        nBuffCol++;
      if (nBuffLine == location.last_line && nBuffCol == location.last_column)
        {
          td.m_nParseLength = i;
          return 0;
        }
    }

  return 1;
}

/* Global functions.  */

void yyerror (YYLTYPE *pLoc, Ftp *pContext, const char *msg)
{
  if (pContext == NULL)
    return;
  pContext->printError (msg);
}
